#!/bin/bash

# TODO
# - Update the file with the new state
# - Push the file to S3
# - Push the state to GitHub

set -e
IFS=" "

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

function error {
cat >&3 <<EOF
{
  "version": { "ref": "$VERSION" },
  "metadata": [
    { "error": "$ERROR" }
  ]
}
EOF
}
trap error ERR

{ # Hide all output

payload=$(mktemp /tmp/resource.XXXXXX)
cat > $payload <&0

DESTINATION_DIR=$1
cd $DESTINATION_DIR

BUCKET=$(jq -r '.source.bucket // "something"' $payload)
BUCKET_DIR=$(jq -r '.source.bucket_subfolder // ""' $payload)

if [ -n "${BUCKET_DIR}" ]; then
  BUCKET_PATH="${BUCKET}/${BUCKET_DIR%/}"
else
  BUCKET_PATH="${BUCKET}"
fi

export AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // ""' $payload)
export AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key// ""' $payload)
export GITHUB_ACCESS_TOKEN=$(jq -r '.source.access_token// ""' $payload)
COMMIT_PATH=$(jq -r '.params.commit_path // ""' $payload)
STATE=$(jq -r '.params.state // ""' $payload)
DESCRIPTION=$(jq -r '.params.description // ""' $payload)
CONTEXTS=$(jq -r '.params.contexts // ""' $payload)
TRIGGER=$(jq -r '.params.trigger // ""' $payload)
REMOTE_PATH=$(jq -r '.params.remote_path // ""' $payload)
REMOTE=$(jq -r '.params.remote // ""' $payload)
VERSION_PATH=$(jq -r '.params.version_path // ""' $payload)
METADATA_PATH=$(jq -r '.params.metadata_path // ""' $payload)
GITHUB_STATE=$(jq -r '.params.github_state // "true"' $payload)

if [ -z "${STATE}" ] || [ -z "${COMMIT_PATH}" ]; then
  ERROR="params.state and params.commit_path are required"
  exit 1
fi

COMMIT=$(cat "${COMMIT_PATH}")

if [ -n "${VERSION_PATH}" ]; then
  VERSION=$(cat "${VERSION_PATH}")
  # Get the json file from S3, updated it and push it back. Race conditions apply!
  EXISTING_FILE="$(aws s3 ls s3://${BUCKET_PATH}/ --recursive | grep .json | grep "${VERSION}" | sort | tail -n 1 | awk '{print $4}')"
else
  VERSION="$(date "+%s")-${COMMIT}"
  EXISTING_FILE=""
fi

if [ -z "${EXISTING_FILE}" ]; then
  FILENAME="${VERSION}.json"
  echo "{}" > "${FILENAME}"
else
  FILENAME="$(basename ${EXISTING_FILE})"
  aws s3 cp "s3://${BUCKET_PATH}/${FILENAME}" ./
  # If trigger wasn't passed in params, try to read it from the existing file
  if [ -z "${TRIGGER}" ]; then
    TRIGGER=$(cat ${FILENAME} | jq -r .trigger)
  fi
fi

update_json_file() {
  cat "${1}" | jq "${2}" > "${1}".tmp && mv "${1}".tmp "${1}"
}

CONTEXTS=${CONTEXTS:-default}
# STATE is not optional. Trip whitespace.
# https://unix.stackexchange.com/a/205854 (Trip whitespace)
echo ${CONTEXTS} | tr ',' '\n' | while read context; do
  context=$(echo "${context}" | awk '{$1=$1};1')
  update_json_file ${FILENAME}  '.states["'${context}'"]="'${STATE}'"'
done
if [ -n "${TRIGGER}" ]; then
  update_json_file ${FILENAME} '.trigger= "'${TRIGGER}'"'
fi

if [ -n "${METADATA_PATH}" ]; then
  METADATA=$(cat "${METADATA_PATH}")
  update_json_file ${FILENAME} ".metadata=$(jq -aR . <<< ${METADATA})"
fi

# COMMIT param should always be there
update_json_file ${FILENAME} '.commit_sha= "'${COMMIT}'"'

if [ -n "${REMOTE}" ] || [ -n "${REMOTE_PATH}" ]; then
  REMOTE=${REMOTE:-$(cat ${REMOTE_PATH})}
  update_json_file ${FILENAME} '.remote= "'${REMOTE}'"'
else # try to read it from the (maybe existing) file from S3
	REMOTE=$(cat ${FILENAME} | jq -r .remote)
fi

aws s3 cp "${FILENAME}" "s3://${BUCKET_PATH}/${FILENAME}"

if [ "${GITHUB_STATE}" == "true" ]; then
  echo ${CONTEXTS} | tr ',' '\n' | while read context; do
    context=$(echo "${context}" | awk '{$1=$1};1')
    return_code=$(curl "https://api.github.com/repos/${REMOTE}/statuses/${COMMIT}" \
      -w "%{http_code}" -s \
      -H "Content-Type: application/json" \
      -H "Authorization: token ${GITHUB_ACCESS_TOKEN}" \
      -X POST \
      -d "{\"context\": \"${context}\", \"state\": \"${STATE}\", \"description\": \"${DESCRIPTION}\", \"target_url\": \"${ATC_EXTERNAL_URL}/builds/${BUILD_ID}\"}")
    if [[ "$return_code" == "20"* ]]; then
      echo "Return code $return_code"
      ERROR="Failed updating Github commit status"
      exit 1
    fi
  done
fi

} > /dev/null

cat >&3 <<EOF
{
  "version": { "ref": "$(echo ${FILENAME} | sed 's/\.json$//g')" },
  "metadata": [
    { "name": "file", "value": "$FILENAME" },
    { "name": "commit", "value": "${COMMIT}" },
    { "name": "remote", "value": "${REMOTE}" },
    { "name": "trigger", "value": "${TRIGGER}" },
    { "name": "metadata", "value": "${METADATA}" }
  ]
}
EOF
