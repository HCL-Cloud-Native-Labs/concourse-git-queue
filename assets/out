#!/bin/bash

# TODO
# - Update the file with the new state
# - Push the file to S3
# - Push the state to GitHub

payload=$(mktemp /tmp/resource.XXXXXX)
cat > $payload <&0
BUCKET=$(jq -r '.source.bucket // "something"' $payload)
BUCKET_DIR=$(jq -r '.source.bucket_subfolder // ""' $payload)
export AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // ""' $payload)
export AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key// ""' $payload)
export GITHUB_ACCESS_TOKEN=$(jq -r '.source.access_token// ""' $payload)
COMMIT_PATH=$(jq -r '.params.commit_path // ""' $payload)
STATE=$(jq -r '.params.state // ""' $payload)
DESCRIPTION=$(jq -r '.params.description // ""' $payload)
CONTEXTS=$(jq -r '.params.contexts // ""' $payload)
TRIGGER=$(jq -r '.params.trigger // ""' $payload)
REMOTE_PATH=$(jq -r '.params.remote_path // ""' $payload)
REMOTE=$(jq -r '.params.remote // ""' $payload)

COMMIT=$(cat "${COMMIT_PATH}")
# Get the json file from S3, updated it and push it back. Race conditions apply!
KEY=$(aws s3 ls s3://$BUCKET/$BUCKET_DIR --recursive | grep .json | grep "${COMMIT}" | sort | tail -n 1 | awk '{print $4}')
if [ -z "${KEY}" ]; then
  echo "{}" > "$(date "+%s")-${COMMIT}.json"
else
  aws s3 cp s3://$BUCKET/$KEY ./
fi

update_json_file() {
  cat ${1} | jq ${2} > ${1}.tmp && mv ${1}.tmp ${1}
}

FILE=$(ls *.json)
CONTEXTS=${CONTEXTS:-default}
echo ${CONTEXTS} | tr ',' '\n' | while read context; do
  update_json_file ${FILE}  '.states["'${context}'"]="'${STATE}'"'
done
if [ -n "${TRIGGER}" ]; then
  update_json_file ${FILE} '.trigger= "'${TRIGGER}'"'
fi
if [ -n "${COMMIT}" ]; then
  update_json_file ${FILE} '.commit_sha= "'${COMMIT}'"'
fi
if [ -n "${REMOTE}" ] || [ -n "${REMOTE_PATH}"]; then
  REMOTE=${REMOTE:-$(cat ${REMOTE_PATH})}
  update_json_file ${FILE} '.remote= "'${REMOTE}'"'
fi

aws s3 cp "${FILE}" s3://$BUCKET/$KEY

echo ${CONTEXTS} | tr ',' '\n' | while read context; do
  curl "https://api.github.com/repos/${REMOTE}/statuses/$COMMIT?access_token=${GITHUB_ACCESS_TOKEN}" \
    -H "Content-Type: application/json" \
    -X POST \
    -d "{\"context\": \"${context}\", \"state\": \"${STATE}\", \"description\": \"${DESCRIPTION}\", \"target_url\": \"${ATC_EXTERNAL_URL}/builds/${BUILD_ID}\"}" 2> /dev/null
done

cat >&3 <<EOF
{
  "version": { "ref": "$COMMIT" },
  "metadata": [
    { "name": "file", "value": "$FILE" }
  ]
}
EOF
